<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="Graphs"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		creationComplete="viewLoaded()"
		xmlns:maximporges="com.maximporges.*">	
	
	<fx:Script>
		<![CDATA[
			import mx.charts.series.LineSeries;
			import mx.collections.ArrayCollection;
			import mx.graphics.Stroke;
			
			import graph.ScrollingGraph;
			
			private var mFile:File;
			private var mFileLines:Array;
			private var mScrollingGraph:ScrollingGraph;
			
			[Bindable]
			private var mImportedTempData:ArrayCollection;
			
			public function viewLoaded():void 
			{
				trace("Hello");
				var so:SharedObject = SharedObject.getLocal("ecobeeStinger");
				if(so.data["fileToLoad"] == null || so.data["fileToLoad"] == "")
					reloadBtn.enabled = false;
			}
			
			public function onLoad(e:Event):void 
			{
				mFile = new File();
				var txtFilter:FileFilter = new FileFilter("Results Files", "*.csv"); 
				mFile.browseForOpen("Open", [txtFilter]); 
				mFile.addEventListener(Event.SELECT, onResultsFileSelected); 
			}
			
			public function onResultsFileSelected(evt:Event):void 
			{ 
				var ba:ByteArray = new ByteArray();
				
				var fileStream:FileStream = new FileStream(); 
				fileStream.open(mFile, FileMode.READ); 
				fileStream.readBytes(ba);
				fileStream.close();
				
				loadResults(ba);
				
				var so:SharedObject = SharedObject.getLocal("ecobeeStinger");
				so.data["fileToLoad"] = mFile.nativePath;
				so.flush();
				
				reloadBtn.enabled = true;
			} 
			
			private function reloadFile(evt:Event):void
			{
				var so:SharedObject = SharedObject.getLocal("ecobeeStinger");
				mFile = new File(so.data["fileToLoad"]);
				onResultsFileSelected(evt);
			}
			
			public function loadResults(ba:ByteArray):void 
			{ 
				var str:String = ba.toString();
				mFileLines = str.split("\n");
				mFileLines.shift();
				parseImportedData();
			} 
			
			private function parseImportedData():void
			{
				mImportedTempData = new ArrayCollection();
				var parts:Array = new Array();
				parts = mFileLines[i].split(",");
				var viewportMax:Date = new Date(parts[0]);
				var viewportMin:Date = new Date(parts[0]);
				
				var len:int = mFileLines.length;
				for(var i:int = 0; i < len; i++)
				{
					parts = mFileLines[i].split(",");
					if(mFileLines[i].indexOf(",,") >= 0)//Parsing out readings from the ecobee that are invalid
					{	
						var obj:Object = new Object();
						if(parts[0] != null && parts[0] != "" && parts[0] != "\r")
							obj.date = parts[0];
						
						if(parts[1] != null && parts[1] != "" && parts[1] != "\r")
							obj.desiredTemp = parts[1];
						else
							obj.desiredTemp = calcAvg(i, 1);;
						
						if(parts[2] != null && parts[2] != "" && parts[2] != "\r")
							obj.upstairsTemp = parts[2];
						else
							obj.upstairsTemp = calcAvg(i, 2);
						
						if(parts[4] != null && parts[4] != "" && parts[4] != "\r")
							obj.outdoorTemp = parts[4];
						else
							obj.outdoorTemp = calcAvg(i, 4);
						
						if(parts[5] != null && parts[5] != "" && parts[5] != "\r")
							obj.downstairsTemp = parts[5];
						else
							obj.downstairsTemp = calcAvg(i, 5);
						
						obj.avg = (Number(obj.downstairsTemp) + Number(obj.upstairsTemp)) /2;
						
						mImportedTempData.addItem(obj);//Date, set temp
					}
					else
						mImportedTempData.addItem({date:parts[0], desiredTemp:parts[1], upstairsTemp:parts[2], downstairsTemp:parts[5], outdoorTemp:parts[4], avg:parts[3]});//Date, set temp
					
					//Determining max an min as we traverse
					var currDate:Date = parseDate(parts[0]);
					if(currDate.getTime() < viewportMin.getTime())
						viewportMin = currDate;
					if(currDate.getTime() > viewportMax.getTime())
						viewportMax = currDate;
				}
				
				//Adding the series tot the chart, eventually these should be user selectable
				tempChart.series = [addSeries("upstairsTemp", "date", "Upstairs")];
				tempChart.series[1] = addSeries("downstairsTemp", "date", "Downstairs");
				tempChart.series[2] = addSeries("outdoorTemp", "date", "Outdoor");
				tempChart.series[3] = addSeries("desiredTemp", "date", "Desired");
				tempChart.series[4] = addSeries("avg", "date", "Average");
				
				tempChart.dataProvider = mImportedTempData;
				
				//Setting initial vars				
				mScrollingGraph = new ScrollingGraph(dateAxis,tempChart, viewportMin, viewportMax, graphPanel);
				
				//Setting the view of the graph
				dateAxis.minimum = viewportMin;
				viewportMax = new Date(viewportMin.getTime() + ScrollingGraph.GRAPHTIMEWINDOW);
				dateAxis.maximum = viewportMax;
			}
			
			private function calcAvg(index:int, property:int):Number
			{
				var below:Number = Number(checkIndexForItem(index-1, property, -1));
				var above:Number = Number(checkIndexForItem(index+1, property, 1));
				var avg:Number = (below + above) / 2;
				return avg;
			}
			
			private function checkIndexForItem(index:int, property:int, searchingDirection:int = -1):Object
			{
				if(index > mFileLines.length-1)
					index = mFileLines.length-1;
				else if (index < 0)
					index = 0;
					
				var parts:Array = mFileLines[index].split(",");
				if(parts[property] == "" || parts[property] == "\r" || parts[property] == null)
					return checkIndexForItem((index + searchingDirection), property);
				
				return parts[property];
			}
			
			public function onAddTime(e:Event):void 
			{
				if(mScrollingGraph != null)
				{
					mScrollingGraph.onAddTime();
				}
			}
			
			private function addSeries(idY:String, idX:String,displayName:String):LineSeries
			{
				var series:LineSeries = new LineSeries();
				series.xField = idX;
				series.yField = idY;
				series.displayName = displayName;
				series.setStyle("lineStroke", new Stroke(Math.random() * 0xFFFFFF,1,1));
				return series;
			}
			
			public function parseDate(s:String):Date 
			{ 
				var newDate:Date = new Date(s);
				return newDate;
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:Panel title="Customize" fontSize="15" width="100%" height="100%">
		<s:layout>
			<s:HorizontalLayout paddingLeft="10" paddingRight="10"
								paddingTop="10" paddingBottom="10" horizontalAlign="center" verticalAlign="bottom"/>
		</s:layout>
		
		<s:Panel id="graphPanel" fontSize="15" title="Graph" width="100%" height="100%">	
			<mx:LineChart  id="tempChart" 
						   width="100%" height="100%" 
						   showDataTips="true" 
						   paddingLeft="10" paddingRight="10" 
						   paddingTop="10" paddingBottom="10"
						   dataProvider="desiredTempData"
						   mouseDown="mScrollingGraph.mouseDownHandler(event)">
				<mx:horizontalAxis>
					<mx:DateTimeAxis id="dateAxis" dataUnits="minutes" dataInterval="5" title="Date" parseFunction="parseDate"/>
				</mx:horizontalAxis>
				<mx:verticalAxis>
					<mx:LinearAxis baseAtZero="false" title="Temperature (Â°F)" />
				</mx:verticalAxis>
				
			</mx:LineChart>
		</s:Panel>
		
		<s:Panel title="Options" fontSize="15" width="25%" height="100%">
			<s:layout>
				<s:VerticalLayout horizontalAlign="center" verticalAlign="middle" variableRowHeight="true"/>
			</s:layout>
			<s:Button id="LoadButton" label="LOAD" width="130" height="60" click="onLoad(event)"/>
			<s:Button id="OtherButton" label="ADD +" width="130" height="60" click="onAddTime(event)"/>
			<s:Button id="reloadBtn" label="RELOAD" width="130" height="60" click="reloadFile(event)"/>
		</s:Panel>
		
	</s:Panel>
	
</s:View>
