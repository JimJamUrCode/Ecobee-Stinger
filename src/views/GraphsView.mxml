<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		title="Graphs"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		creationComplete="viewLoaded()"
		xmlns:maximporges="com.maximporges.*">	
	
	<fx:Script>
		<![CDATA[
			import mx.charts.series.LineSeries;
			import mx.graphics.Stroke;
			
			import spark.components.CheckBox;
			
			import ecobeeTools.EcobeeDataParser;
			
			import graph.ScrollingGraph;
			
			import tools.FileManager;
			
			private var mFileManager:FileManager;
			private var mScrollingGraph:ScrollingGraph;
			private var mEcobeeDataParser:EcobeeDataParser;
			
			private var mColors:Array;
			private var mAllCheckBoxes:Object;
			
			public function viewLoaded():void 
			{
				//Check to see if the user has selected a file in the past
				var so:SharedObject = SharedObject.getLocal("ecobeeStinger");
				if(so.data["fileToLoad"] == null || so.data["fileToLoad"] == "")
					reloadBtn.enabled = false;
				
				LoadButton.scaleX = .5;
				LoadButton.scaleY = .5;
				reloadBtn.scaleX = .5;
				reloadBtn.scaleY = .5;
			}
			
			private function loadFile(evt:Event):void
			{
				mFileManager = new FileManager();
				mFileManager.SelectFileToLoad(fileLoadedSuccess, fileLoadedFailed);
			}
			
			private function reloadFile(evt:Event):void
			{
				var so:SharedObject = SharedObject.getLocal("ecobeeStinger");
				if(mFileManager == null)
					mFileManager = new FileManager();
				mFileManager.reloadFile(so.data["fileToLoad"], fileLoadedSuccess, fileLoadedFailed);
			}
			
			private function fileLoadedFailed():void
			{
				
			}
			
			private function fileLoadedSuccess(file:File):void
			{
				var so:SharedObject = SharedObject.getLocal("ecobeeStinger");
				so.data["fileToLoad"] = file.nativePath;
				so.flush();
				
				reloadBtn.enabled = true;
				
				parseImportedData();
			}
			
			private function parseImportedData():void
			{
				tempChart.dataProvider = null;
				mEcobeeDataParser = new EcobeeDataParser();
				
				//Parsing ecobee data
				mEcobeeDataParser.parseData(mFileManager.getFileData());
				var MaxMinDates:Object = mEcobeeDataParser.findMaxMinDate();
				
				tempChart.dataProvider = mEcobeeDataParser.getImportedData();
				
				var minDate:Date = new Date(MaxMinDates.minDate)
				var maxDate:Date = new Date(MaxMinDates.maxDate);
				
				trace("MinDate: " + minDate);
				trace("MaxDate: " + maxDate);
				//Setting initial vars				
				mScrollingGraph = new ScrollingGraph(dateAxis,tempChart, minDate, maxDate, graphPanel);
				
				//Setting the view of the graph
				dateAxis.minimum = minDate;
				dateAxis.maximum = new Date(minDate.getTime() + ScrollingGraph.GRAPHTIMEWINDOW);
				
				//Adding the series to the chart
				createAllCheckBoxes();
				addAllUserSelectedSeries(new MouseEvent(""));
			}
			
			private function createAllCheckBoxes():void
			{
				var headers:Array = mEcobeeDataParser.getHeaders();
				var cb:CheckBox;
				var len:int = headers.length;
				
				createColors(len);
				
				for(var i:int = 2; i < len; i++)
				{
					cb = new CheckBox();
					cb.id = headers[i] + "ChkBox";
					cb.label = headers[i];
					cb.setStyle("color", mColors[i]);
					cb.setStyle("fontSize", 30);
					cb.addEventListener(MouseEvent.CLICK, addAllUserSelectedSeries);
					cb.scaleX = .5;
					cb.scaleY = .5;
					if(i < 5)
						cb.selected = true;
					vgroup.addElement(cb);
					mAllCheckBoxes[headers[i]] = cb;
				}
			}
			
			private function createColors(number:int):void
			{
				mColors = new Array();
				for(var i:int = 0; i < number; i++)
					mColors.push(Math.random() * 0xF95F2F);
				
				//One day make custom color layouts
//				mColors["Cool"] = 0x00ffff;
//				mColors["Warm"] = 0xffaa00;
//				mColors["Hot"] = 0xff6600;
//				mColors["Hottest"] = 0xff0000;
//				
//				mColors["Outdoor"] = 0x009933;
//				mColors["Current"] = 0xffffff;
			}
			
			private function addAllUserSelectedSeries(e:MouseEvent):void
			{
				tempChart.series = new Array();
				var currentSeries:int = 0;
				
				var headers:Array = mEcobeeDataParser.getHeaders();
				var cb:CheckBox;
				var len:int = headers.length;
				
				createColors(len);
				
				for(var i:int = 2; i < len; i++)
				{
					cb = mAllCheckBoxes[headers[i]];
					if(cb.selected)
					{
						tempChart.series[currentSeries] = addSeries(headers[i], "Date", headers[i], cb.getStyle("color"));
						currentSeries++;
					}
				}
			}
			
			private function addSeries(idY:String, idX:String,displayName:String, color:uint):LineSeries
			{
				var series:LineSeries = new LineSeries();
				series.xField = idX;
				series.yField = idY;
				series.displayName = displayName;
				series.setStyle("lineStroke", new Stroke(color,1,1));
				return series;
			}
			
			public function parseDate(s:String):Date 
			{ 
				return new Date(s);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:Panel title="Customize" fontSize="15" width="100%" height="100%">
		<s:layout>
			<s:HorizontalLayout paddingLeft="10" paddingRight="10"
								paddingTop="10" paddingBottom="10" horizontalAlign="center" verticalAlign="bottom"/>
		</s:layout>
		
		<s:Panel id="graphPanel" fontSize="15" title="Graph" width="100%" height="100%">	
			<mx:LineChart  id="tempChart" 
						   width="100%" height="100%" 
						   showDataTips="true" 
						   paddingLeft="10" paddingRight="10" 
						   paddingTop="10" paddingBottom="10"
						   mouseDown="mScrollingGraph.mouseDownHandler(event)">
				<mx:horizontalAxis>
					<mx:DateTimeAxis id="dateAxis" dataUnits="minutes" dataInterval="5" title="Date" parseFunction="parseDate"/>
				</mx:horizontalAxis>
				<mx:verticalAxis>
					<mx:LinearAxis baseAtZero="false" title="Temperature (Â°F)" />
				</mx:verticalAxis>
				
			</mx:LineChart>
		</s:Panel>
		
		<s:Panel title="Options" fontSize="15" width="25%" height="100%">
			<s:layout>
				<s:VerticalLayout horizontalAlign="center" verticalAlign="middle" variableRowHeight="true"/>
			</s:layout>
			<s:Button id="LoadButton" label="LOAD" width="150" height="60" click="loadFile(event)"/>
			<s:Button id="reloadBtn" label="RELOAD" width="150" height="60" click="reloadFile(event)"/>
			
			<s:Scroller width="100%" height="100%" horizontalScrollPolicy="off">
				<s:VGroup id="vgroup" left="10" right="10" top="10" bottom="10" width="100%" height="100%">
					<s:Label fontSize="12" text="Select Visible Lines:"/>
				</s:VGroup>
			</s:Scroller>
		</s:Panel>
		
	</s:Panel>
	
</s:View>
